{"version":3,"sources":["components/AddCategoty.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpert.js","index.js"],"names":["AddCategoty","setCategory","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpert","setCategories","cat","i","ReactDOM","render","document","getElementById"],"mappings":"6LAIaA,EAAc,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YAAiB,EACNC,mBAAS,IADH,mBACnCC,EADmC,KACvBC,EADuB,KAe1C,OACI,0BAAMC,SATW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAa,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC3CN,EAAc,OAMd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAjBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,Y,uBCRlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,kDAE6BC,UAAUH,GAFvC,+DAIAI,MAAMF,GAJN,cAIbG,EAJa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAeZM,GAfY,4CAAH,sDCGPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEpC,OACI,yBAAKc,UAAU,QACX,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,+BAAKA,EAAL,OCJCO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECAb,SAACA,GAAa,IAAD,EACXd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAHwB,mBAC9BC,EAD8B,KACvBC,EADuB,KAerC,OATAC,qBAAU,WACNxB,EAAQC,GAAUwB,MAAM,SAAAC,GACpBH,EAAS,CACLf,KAAKkB,EACLL,SAAS,SAGlB,CAACpB,IAEGqB,EDbwBK,CAAa1B,GAA/ByB,EAFwB,EAE9BlB,KAAYa,EAFkB,EAElBA,QAEnB,OACI,oCACI,wBAAIJ,UAAU,qCAAqChB,GACjDoB,GAAW,uBAAGJ,UAAU,mCAAb,cACb,yBAAKA,UAAU,+CACVS,EAAKhB,KAAI,SAACC,GAAD,OACN,kBAAC,EAAD,eAAaiB,IAAKjB,EAAIC,IAAQD,UEVrCkB,EAAY,WAAO,IAAD,EACO1C,mBAAS,CAAC,kBADjB,mBACtBQ,EADsB,KACVmC,EADU,KAG3B,OACI,oCACI,8CACA,kBAAC,EAAD,CAAa5C,YAAa4C,IAC1B,6BACA,4BACKnC,EAAWe,KAAI,SAACqB,EAAKC,GAAN,OACZ,kBAAC,EAAD,CAASJ,IAAKG,EAAK9B,SAAU8B,U,MCPjDE,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.6f1473fc.chunk.js","sourcesContent":["import React from 'react'\nimport { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategoty = ({setCategory}) => {\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if(inputValue.trim().length > 2){\n            setCategory( categories => [inputValue, ...categories]);\n            setInputValue('');\n        }\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input \n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n            />\n        </form>\n    )\n}\n\nAddCategoty.propTypes = {\n    setCategory: PropTypes.func.isRequired\n}","export const getGifs = async (category) => {\n    const url =\n        `https://api.giphy.com/v1/gifs/search?q= ${ encodeURI(category) } &limit=5&api_key=ssiN9JxykqzAyICcjxzGOlBdTisFAGkk`;\n\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gifs = data.map((img) => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url,\n        };\n    });\n\n    return gifs;\n};","\nimport React from 'react'\n\nexport const GifGridItem = ({id, title, url}) => {\n\n    return (\n        <div className=\"card\">\n            <img src={url} alt={title} />\n            <p> {title} </p>\n        </div>\n    )\n}\n","import React from \"react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport { GifGridItem } from \"./GifGridItem\";\n\nexport const GifGrid = ({ category }) => {\n\n    const {data: imgs, loading } = useFetchGifs(category);\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__bounce\">{category}</h3>\n            { loading && <p className=\"animate__animate animate__flash\">Loading...</p>}\n            <div className=\"card-grid animate__animated animate__bounce\">\n                {imgs.map((img) => (\n                    <GifGridItem key={img.id} {...img} />\n                ))}\n            </div>\n        </>\n    );\n};\n","import { useState } from \"react\"\nimport { useEffect } from \"react\";\nimport { getGifs } from '../helpers/getGifs'\n\nexport const useFetchGifs = (category) =>{\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(()=>{\n        getGifs(category).then( imgs => {\n            setState({\n                data:imgs,\n                loading: false\n            });\n        });\n    }, [category]);\n\n    return state;\n\n}","import React, { useState } from \"react\";\nimport { AddCategoty } from \"./AddCategoty\";\nimport { GifGrid } from \"./GifGrid\";\n\nexport const GifExpert = () => {\n    let [categories, setCategories] = useState([\"One Punch Man\"]);\n\n    return (\n        <>\n            <h2>Gif Expert App</h2>\n            <AddCategoty setCategory={setCategories} />\n            <hr />\n            <ol>\n                {categories.map((cat, i) => (\n                    <GifGrid key={cat} category={cat} />\n                ))}\n            </ol>\n        </>\n    );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpert } from './components/GifExpert';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpert />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}